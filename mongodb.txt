MONGODUMP:

    $ mongodump --host 10.0.200.100 --collection items --db crawler_data
        IMPORTANT: If it shows a "locale" related error, run:
            $ export LC_ALL="en_US.UTF-8"

                OR, if that does not work:

            $ apt-get install locales
            $ locale-gen en_US.UTF-8
            $ dpkg-reconfigure locales
                (informe o locale número 138 - en_US.UTF-8)

            , and try again.

MONGORESTORE:

    $ mongorestore /path/of/the/mongo/dump
        IMPORTANT: If it shows a "locale" related error, run:
            $ export LC_ALL="en_US.UTF-8"
            , and try again.


MONGOEXPORT:

    #!/bin/bash

    fields="_id.id,ean,name,department,category,url,image_url,price,special_price,instalments,instalment_value,available,brand,tyre__width,tyre__aspect_ratio,tyre__rim_diameter,tyre__load_index,tyre__speed_rating"

    SPIDERS="extra gbg_pneus americanas pneu_free bridgestone casasbahia pneus_albuquerque pneustore pneu_plus pneumar kd_pneus hipervarejo pneusola colombo caçula_de_pneus tireshop dellavia walmart autoz itaro pneus_facil pontofrio magazine_luiza dpaschoal"

    for spider in $SPIDERS; do mongoexport --host 10.0.200.100 -d test2 -c items -q "{\"_meta.spider_name\": \"$spider\", \"_spider_run_id\": ObjectId(\"555f9343075ce800101dedb5\")}" -f $fields --csv > ./$spider.csv; done


QUERIES (examples):

    FIND / COUNT:
        db.items.find({"_meta.spider_name": "pneumania", "sku": "163"})
        db.items.find()
        db.items.count()

    REMOVE (DELETE):
        db.items.remove({"_id.site": "Arcondicionado"})

    GET INDEXES:
        db.items.getIndexes()

    CREATE AN INDEX ON 2 FIELDS:
        db.items.ensureIndex({"domain": 1, "sku": 1});

    SELECT SPECIFIC FIELDS ON A SELECT:
        db.queues.find({}, {
            "spider_run_id": 1,
            "save_time": 1
        });
        (Equivalent in SQL: SELECT spider_run_id, save_time FROM queues)


    SHOW ALL DATABASES ON A MONGO INSTANCE:
        $ show dbs;
        - To SELECT ONE of them:
            $ use [db_name]
            (the current database will be on the "db" instance.
             Than your can query for db.collection.find(), etc...)
        - To SHOW ALL COLLECTIONS ON THE CURRENT DATABASE:
            $ show collections

    MONGO CLIENT:
        - CONECTAR A UM DB E FAZER QUERYS:
            > mongo
            > var db = connect('crawler_data')
            > db.items.find({"_id.site": "PontoFrio"})
            > db.items.count({"_id.site": "PontoFrio"})
            > db.items.runCommand({"distinct": "items", "key": "_id.site"})
	    > db.spider_runs.runCommand({"distinct": "spider_runs", "key": "site"})	
            > db.items.findOne({'_meta.spider_name':'poloar'})

            >
                db.items.find({"_id.site": "GBG Pneus", "brand": /Pneu /}).forEach(function(doc) {
                  doc.brand = doc.brand.replace(/Pneu /g, '');
                  db.items.save(doc);
                });

            On the example above I find all documents that have the "Pneu " string on the "brand" field and that have "_id.site" as "GBG Pneus", and change that regex's occurence found to "". That will change, for example, "Pneu Maggion" to "Maggion".

            > db.extractions_quality_summary.runCommand({"distinct": "extractions_quality_summary", "key": "_site_name"})

            Below I sort by "id":
            > db.extractions_quality_summary.find({"_site_name": "Pneus Albuquerque"}).sort({"id": 1})

            Below I sort by "id DESC":
            > db.extractions_quality_summary.find({"_site_name": "Pneus Albuquerque"}).sort({"id": -1})

            SELECT * FROM spider_runs WHERE finish_time is NOT NULL
            > db.spider_runs.find({"finish_time": {"$ne": null}});

            QUANTIDADE DE ITEMS EM UM SPIDER_RUN_ID:
            > db.items.count({"spider_run_id" : ObjectId("555e2b8e0bd0d30011b21a4c")})

            > db.spider_runs.find({"finish_time":{"$ne":null}}).sort({'_id':-1}).limit(7);
