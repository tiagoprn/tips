1) Importar arquivo CSV dentro de tabela do MySQL:

	LOAD DATA INFILE 'NomeDoArquivo.csv'
	INTO TABLE nome_tabela
	CHARACTER SET [latin1/utf8]
	FIELDS TERMINATED BY 'separadorCampos'
	OPTIONALLY ENCLOSED BY '”'
	LINES TERMINATED BY '\r\n'

---

2) Selecionar todos os registros onde o campo string tem um determinado tamanho:

SELECT *
FROM cep
WHERE length(cep)=7

(Neste caso, que o cep tenha tamanho 7).

---

3) Concatenar valores em um determinado campo:

UPDATE cep_crescente
SET cep = CONCAT("0",cep)
WHERE length(cep)=7

(Neste caso, acrescenta um “0” na frente do campo cep em todos os registros onde o cep tem 7 posições.)

---

4) Casting de um tipo string para integer:

	ORDER BY CAST(cep AS UNSIGNED INTEGER ) ASC

	(Neste caso, converte para trazer ordenado por ordem crescente de número.)

---

5) Exportar consulta SQL para arquivo CSV formatado:

SELECT *
FROM lista_ceps n
WHERE n.cepini LIKE "0%"
INTO OUTFILE "C:/teste3.txt"
FIELDS TERMINATED BY ';'
OPTIONALLY ENCLOSED BY '”'
LINES TERMINATED BY '\r\n'

	OBS.: Usando as funções de manipulação de string “LPAD”  e “RPAD” (ver referência abaixo), posso transformar os campos em largura fixa na hora de exportar.

---

6) Dump/restore de várias bases de dados (apenas a estrutura das tabelas, sem o conteúdo delas):

A) DUMP:

mysqldump -h <nome/ip do host> -u root -p<SENHA> --add-drop-database --add-drop-table --no-data --databases db1 db2 db3 > /tmp/dbs.sql

OBS 1: O segredo aqui para não fazer backup dos dados é usar a flag “--no-data”. Desta forma é feito backup apenas da estrutura das tabelas. Já se eu remover esta flag, o backup será feito tanto da estrutura das tabelas quanto dos seus dados.

OBS 2: No parâmetro -p (password), a senha deve ser digitada “coladinha” no -p. Desta forma não será aberto o prompt para informar a senha manualmente.

OBS 3: Se for rodar, por exemplo, este script em um cron job em uma máquina, e o servidor mysql for o mesmo do cronjob, e o usuário root do mysql não tiver senha, não adianta colocar nada depois do -p, porque qualquer string após irá mostrar o prompt para informar a senha. A alternativa neste caso é criar um arquivo “.my.cnf” no home do usuário que irá executar o script com permissão 600, para que outros usuários não possam lê-lo. Este arquivo irá conter o usuário e senha para o mysqldump. Exemplo de conteúdo deste arquivo:
[mysqldump]
user = root
password =

Então basta rodar o comando mysqldump sem informar os parâmetros “-u” e “-p”.

OBS 4: Para fazer o backup de TODAS as databases, ao invés de listar as databases com “--databases”, basta usar o parâmetro “--all-databases” em seu lugar.


B) RESTORE:

mysql -h <nome/ip do host> -u root -p<SENHA> < /tmp/dbs.sql

OBS: No parâmetro -p (password), a senha deve ser digitada “coladinha” no -p. Desta forma não será aberto o prompt para informar a senha manualmente.

---

7) Funções de manipulação de strings:

A) RPAD(str,len,padstr)
Returns the string str, right-padded with the string padstr to a length of len characters. If str is longer than len, the return value is shortened to len characters.
mysql> SELECT RPAD('hi',5,'?');
        -> 'hi???'
mysql> SELECT RPAD('hi',1,'?');
        -> 'h'

B) RTRIM(str)
Returns the string str with trailing space characters removed.
mysql> SELECT RTRIM('barbar   ');
        -> 'barbar'

C) LPAD(str,len,padstr)
Returns the string str, left-padded with the string padstr to a length of len characters. If str is longer than len, the return value is shortened to len characters.
mysql> SELECT LPAD('hi',4,'??');
        -> '??hi'
mysql> SELECT LPAD('hi',1,'??');
        -> 'h'

D) LTRIM(str)
Returns the string str with leading space characters removed.
mysql> SELECT LTRIM('  barbar');
        -> 'barbar'

E) LOCATE(substr,str), LOCATE(substr,str,pos)
The first syntax returns the position of the first occurrence of substring substr in string str. The second syntax returns the position of the first occurrence of substring substr in string str, starting at position pos. Returns 0 if substr is not in str.
mysql> SELECT LOCATE('bar', 'foobarbar');
        -> 4
mysql> SELECT LOCATE('xbar', 'foobar');
        -> 0
mysql> SELECT LOCATE('bar', 'foobarbar', 5);
        -> 7


F) LOWER(str)
Returns the string str with all characters changed to lowercase according to the current character set mapping. The default is latin1 (cp1252 West European).
mysql> SELECT LOWER('QUADRATICALLY');
        -> 'quadratically'

G) UPPER(str)
Returns the string str with all characters changed to uppercase according to the current character set mapping. The default is latin1 (cp1252 West European).
mysql> SELECT UPPER('Hej');
        -> 'HEJ'

---

8) Liberar qualquer usuário em qualquer host para acessar uma base de dados mysql:

	A) No arquivo 'my.cnf' (ou 'my.ini'), alterar a linha:
		bind-address = 127.0.0.1
	para
		bind-address = 187.33.0.179
	OBS.: ou seja, o bind-address dever ser o IP real da máquina.

	B) No console do MySQL, executar:
		$ GRANT ALL ON *.* TO 'root'@'%' identified by 'senha';
		$ flush privileges;

---

9) Exportar um select para um arquivo CSV:

(referência: http://www.plugmasters.com.br/sys/materias/51/1/Como-salvar-o-resultado-de-uma-consulta-MySQL-em-um-txt )

SELECT id, mailserver, group_size,
  message_interval, group_interval, datetime
FROM email_marketing_throttlelog
INTO OUTFILE 'email_marketing_throttlelog.dados.csv'
FIELDS
  TERMINATED BY ','
  OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'

Neste caso, como não especifiquei o caminho, o arquivo estará na pasta “data” do myql, subpasta “nome_da_database”.

	Se precisarmos especificar delimitadores de campos no arquivo de consulta, devemos utilizar o parâmetro FIELDS. A sintaxe é a que segue:

FIELDS
TERMINATED BY 'caracter_x'
OPTIONALLY ENCLOSED BY 'caracter_y'
ESCAPED BY 'caracter_escape'
LINES TERMINATED BY 'caracter_termino'

	Sobre a cláusula FIELDS, como vimos nos exemplos anteriores, ela é opcional. Mas uma vez que seja declarada, é necessário preencher um dos parâmetros. Seus parâmetros são os seguintes:

. TERMINATED: indica qual caracter será o delimitador de campos do arquivo.
Se for o 'TAB', não precisamos declará-lo (por ser padrão). Aqui podemos definir outro padrão, como por exemplo o ' ; ';

. ENCLOSED BY: indica o caracter que será usado para envolver os campos no arquivo. Se não colocarmos o parâmetro OPTIONALLY, todos os campos começarão e terminarão com o caracter especificado. Colocando o OPTIONALLY, apenas os campos CHAR, VARCHAR e TEXT começarão e terminarão com este caracter especificado;

. ESCAPED BY: controla a forma como determinados caracteres foram gravados
no arquivo. É válido quando queremos que a consulta informe um valor alternativo a determinados valores (por exemplo campos com conteúdo NULL);

. LINES TERMINATED BY: este parâmetro, opcional, indica qual deve ser o caracter que indica o fim de linha.

	OBS.: FORMA ALTERNATIVA DE FAZER ISSO SE NÃO TENHO ACESSO “FILE” PARA GERAR O CSV (VIA LINHA DE COMANDO):
	$ mysql -u root -p --database='simpletasks2' -e "SELECT * FROM core_task;" | sed "s/'/\'/;s/\t/\",\"/g;s/^/\"/;s/$/\"/;s/\n//g" > /tmp/select.txt
	(referência: http://stackoverflow.com/questions/356578/how-to-output-mysql-query-results-in-csv-format)

---


10) MOSTRAR ÍNDICES DE UMA TABELA:

	mysql> SHOW INDEXES FROM core_task;

---

11) CRIAR ÍNDICE EM UMA TABELA:

	mysql> CREATE INDEX nome_indice ON nome_tabela (campo1, campo2, campo3);

PS: Para EXCLUIR um índice:
	DROP INDEX nome_indice ON nome_tabela;


---

12) LISTA TODOS OS PROCESSOS DO MYSQL EM EXECUÇÃO:

  $ mysqladmin -u root -psenhamysql processlist

  ou

  $ echo "show full processlist\G" | mysql -u root -psenhamysql

  ou ainda, no console do mysql:

  mysql> SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;

---

13) VERIFICAR O STATUS DE TODAS AS TABELAS DA BASE DE DADOS:
  (Se estão com problemas, ou não...)
  mysql > (ANALYZE)

---

14) DAR KILL EM UMA QUERY SENDO EXECUTADA NO MYSQL:

mysql> show processlist;

It will display something like:
+-----+-------+-----------+----------+---------+------+-------+------------------+
| Id  | User  | Host      | db       | Command | Time | State | Info             |
+-----+-------+-----------+----------+---------+------+-------+------------------+
| 709 | admin | localhost | database | Sleep   |  879 |       | NULL             |
| 710 | admin | localhost | database | Sleep   |  766 |       | NULL             |
| 711 | admin | localhost | database | Sleep   | 1330 |       | NULL             |
+-----+-------+-----------+----------+---------+------+-------+------------------+

To kill the process, you can do the following:
mysql> kill 709;

---

15) Mostrar informações de uma tabela (engine, qtde linhas, collation, etc...):

 SHOW TABLE STATUS FROM database_name LIKE 'table_name'

---

16) FORMA ALTERNATIVA DE EXPORTAR UMA QUERY PARA ARQUIVO TEXTO (OU RODAR UMA QUERY QUALQUER) NO MYSQL:

echo "SELECT * FROM TABELA WHERE fim BETWEEN '2012-04-01 00:00:00' AND '2012-04-30 23:59:59')" | mysql -h localhost -u root -pPASSWORD minha_database > /tmp/select.txt

---

17) TABELA COM CAMPO TIMESTAMP (ASSUMINDO DATA/HORA ATUAL COMO DEFAULT):

CREATE TABLE fila (
    id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    qtde BIGINT NOT NULL,
    momento TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

---

18) Mostrar o charset de todas as tabelas+colunas de todas as databases (MySQL 5 ou superior):

SELECT TABLE_SCHEMA,
    TABLE_NAME,
    CCSA.CHARACTER_SET_NAME AS DEFAULT_CHAR_SET,
    COLUMN_NAME,
    COLUMN_TYPE,
    C.CHARACTER_SET_NAME
FROM information_schema.TABLES AS T
    JOIN information_schema.COLUMNS AS C USING (TABLE_SCHEMA, TABLE_NAME)
    JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY AS CCSA
    ON (T.TABLE_COLLATION = CCSA.COLLATION_NAME)
WHERE TABLE_SCHEMA=SCHEMA()
    AND C.DATA_TYPE IN ('enum', 'varchar', 'char', 'text', 'mediumtext', 'longtext')
ORDER BY TABLE_SCHEMA,
    TABLE_NAME,
    COLUMN_NAME

---

19) Erro: 'ascii codec can't decode byte X in position x: ordinal not in range(X)' ao aplicar unicode() em uma string:

SOLUÇÃO: Se eu estiver lendo de uma coluna do banco, verificar a codificação dessa coluna (OBS.: se a origem da leitura for outra - por exemplo, arquivo, o problema pode ser o mesmo).
         Tive um caso onde acontecia esse erro, e o problema era que a codificação original da coluna (CHARACTER_SET_NAME ) era 'latin1'.

         Então, ao invés de:
                entidade_nome = unicode(line[8])

         , o correto é usar:
                entidade_nome = unicode(line[8], 'latin-1')

         , nesse caso.

         Na query executada no banco, a codificação do campo contato_nome estava apontando como:

         | TABLE_SCHEMA   | TABLE_NAME                                 | DEFAULT_CHAR_SET | COLUMN_NAME                       | COLUMN_TYPE   | CHARACTER_SET_NAME |
         | emailmarketing | email_marketing_entidade                   | utf8             | nome                              | varchar(120)  | latin1             |

         E a query era:

            SELECT campo0,
                campo1,
                campo2,
                campo3,
                campo4,
                campo5,
                campo6,
                campo7,
                e.nome AS entidade_nome  /* observe o CHARACTER_SET_NAME do COLUMN_NAME 'nome'  */
            FROM email_marketing_acao a
            ...

---
20)

/* SE EU GRAVAR EM UMA TABELA REGISTROS A CADA MEIA HORA, E PRECISAR SELECIONAR
    TODOS OS REGISTROS DE TODOS OS DIAS QUE ESTIVEREM NA FAIXA DE HORÁRIO ATUAL (ENTRE A HORA ATUAL E A PRÓXIMA HORA):

     DESCRIBE fila;
    +---------+---------------------+------+-----+-------------------+----------------+
    | Field   | Type                | Null | Key | Default           | Extra          |
    +---------+---------------------+------+-----+-------------------+----------------+
    | id      | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment |
    | qtde    | bigint(20)          | NO   |     | NULL              |                |
    | momento | timestamp           | NO   |     | CURRENT_TIMESTAMP |                |
    +---------+---------------------+------+-----+-------------------+----------------+
*/

SELECT NOW(), momento, qtde FROM fila
WHERE (EXTRACT(HOUR FROM momento) BETWEEN EXTRACT(HOUR FROM NOW()) AND EXTRACT(HOUR FROM NOW()) + 1)
    AND (EXTRACT(DAY FROM momento) <> EXTRACT(DAY FROM NOW()));

+---------------------+---------------------+--------+
| NOW()               | momento             | qtde   |
+---------------------+---------------------+--------+
| 2012-10-09 16:47:57 | 2012-10-03 17:00:02 |  19887 |
| 2012-10-09 16:47:57 | 2012-10-03 17:30:01 |    479 |
| 2012-10-09 16:47:57 | 2012-10-04 16:00:01 |   6373 |
| 2012-10-09 16:47:57 | 2012-10-04 16:30:01 |      8 |
| 2012-10-09 16:47:57 | 2012-10-04 17:00:01 |   4192 |
| 2012-10-09 16:47:57 | 2012-10-04 17:30:02 |      4 |
| 2012-10-09 16:47:57 | 2012-10-05 16:00:02 |  21037 |
| 2012-10-09 16:47:57 | 2012-10-05 16:30:02 |  10648 |
| 2012-10-09 16:47:57 | 2012-10-05 17:00:01 |  15324 |
| 2012-10-09 16:47:57 | 2012-10-05 17:30:06 |    121 |
| 2012-10-09 16:47:57 | 2012-10-06 16:00:02 |      0 |
| 2012-10-09 16:47:57 | 2012-10-06 16:30:02 |   2344 |
| 2012-10-09 16:47:57 | 2012-10-06 17:00:02 |     36 |
| 2012-10-09 16:47:57 | 2012-10-06 17:30:02 |      9 |
| 2012-10-09 16:47:57 | 2012-10-07 16:00:02 |      0 |
| 2012-10-09 16:47:57 | 2012-10-07 16:30:02 |      0 |
| 2012-10-09 16:47:57 | 2012-10-07 17:00:02 |      0 |
| 2012-10-09 16:47:57 | 2012-10-07 17:30:01 |      0 |
| 2012-10-09 16:47:57 | 2012-10-08 16:00:02 |    331 |
| 2012-10-09 16:47:57 | 2012-10-08 16:30:02 |    118 |
| 2012-10-09 16:47:57 | 2012-10-08 17:00:01 |      6 |
| 2012-10-09 16:47:57 | 2012-10-08 17:30:01 |   1420 |
+---------------------+---------------------+--------+

/* MÉDIA HISTÓRICA DE DISPAROS NA FILA DENTRO DO HORÁRIO ATUAL, A PARTIR DE UM MOMENTO "X"  */
SELECT CONCAT(EXTRACT(HOUR FROM NOW()), ':', EXTRACT(MINUTE FROM NOW())) AS hora_atual,
    SUM(qtde) / COUNT(id) AS media_disparos_horario,
    CONCAT(EXTRACT(HOUR FROM NOW()), ':00') AS periodo_inicio_calculo,
    CONCAT(EXTRACT(HOUR FROM NOW()) + 1, ':30') AS periodo_final_calculo
FROM fila
WHERE (momento > '2012-10-01 20:00:00')
    AND (EXTRACT(HOUR FROM momento) BETWEEN EXTRACT(HOUR FROM NOW()) AND EXTRACT(HOUR FROM NOW()) + 1)
    AND (EXTRACT(DAY FROM momento) <> EXTRACT(DAY FROM NOW()));

---

21) Descobrir se há tabelas que necessitam de repair table (myisam):

mysqldump -h <nome/ip do host> -u root -p<SENHA> --add-drop-database --add-drop-table --no-data --databases db1 db2 db3 > /tmp/dbs.sql

Se alguma tabela estiver com problemas, vai retornar:

mysqldump: Got error: 144: Table './database/my_table' is marked as crashed and last (automatic?) repair failed when using LOCK TABLES


---

22) MUDAR O TIPO DE UMA COLUNA:

    To change a column's definition, use MODIFY or CHANGE clause along with ALTER command. For example, to change column c from CHAR(1) to CHAR(10), do this:
        mysql> ALTER TABLE testalter_tbl MODIFY c CHAR(10);

    With CHANGE, the syntax is a bit different. After the CHANGE keyword, you name the column you want to change, then specify the new definition, which includes the new name. Try out following example:
        mysql> ALTER TABLE testalter_tbl CHANGE i j BIGINT;

    If you now use CHANGE to convert j from BIGINT back to INT without changing the column name, the statement be as expected:
        mysql> ALTER TABLE testalter_tbl CHANGE j j INT;

---

23) COMO RESETAR A SENHA DO USER ROOT DO MYSQL:

    Importante: é preciso acesso de root ao server.

        1) Criar um arquivo com os comandos para rodar a troca da senha:
            UPDATE mysql.user SET Password=PASSWORD('v3t3x2y2') WHERE User='root';
            FLUSH PRIVILEGES; /* aplica as novas permissões */

        2) Derrubar o daemon do mysql

        3) Iniciar o daemon do mysql manualmente, apontando o arquivo criado em [1] como "init file":
            # su - mysql
            $ mysqld_safe --init-file=my_file_da_etapa_1.txt

        4) Testar a conexão com a nova senha (Ex.: pelo próprio client do mysql)

        5) Derrubar o daemon manual do mysql

        6) Iniciar o daemon normal do mysql.



---

24) DUMP DE TABELAS ESPECÍFICAS DE UMA DATABASE:

mysqldump -h host -u root -pPASSWORD --add-drop-table --databases db1 --tables table1 table2 table3 > /tmp/database_specific_tables_dump.sql

---

25) COMO FAZER UM SELECT QUE GERA UM ARQUIVO COM COMANDOS INSERT PARA ALIMENTAR UMA OUTRA DATABASE:

    /* TABELA */
    SELECT
        CONCAT("INSERT INTO tabela(id, entidade_id, nome, email, importacao_id,formato_email, confirmado, status, optout,data_inclusao, ip_inclusao, formulario_id,data_confirmacao, ip_confirmacao) VALUES (",
                    id,",",entidade_id
                    ,",",IFNULL(CONCAT("""",nome,""""),"NULL")
                    ,",""",email
                    ,""",",IFNULL(importacao_id,"NULL")
                    ,", ",formato_email
                    ,", ",confirmado
                    ,", ",status,", "
                    , IFNULL(optout,"NULL")
                    ,",""",data_inclusao,""""
                    ,",",IFNULL(CONCAT("""",ip_inclusao,""""),"NULL")
                    ,",",IFNULL(formulario_id,"NULL")
                    ,",",IFNULL(CONCAT("""",data_confirmacao,""""),"NULL")
                    ,",",IFNULL(CONCAT("""",ip_confirmacao,""""),"NULL")
                ,");"
              )
    FROM tabela
    INTO OUTFILE "/tmp/contatos.txt";

    /* TABELALISTA */
    SELECT
        CONCAT("INSERT INTO db1.tabelalista (id,contato_id,lista_id,data_inclusao,ip_inclusao) VALUES (",id,", ",contato_id,", ",lista_id,",""",data_inclusao,""",",IFNULL(CONCAT("""",ip_inclusao,""""),"NULL"),");")
    FROM tabelalista
    INTO OUTFILE "/tmp/contatos_listas.sql";

---

25) CARREGAR ARQUIVO VIA MYSQL (PRECISA DAS PERMISSÕES DE ROOT SE O OWNER DO ARQUIVO FOR ROOT):

SELECT load_file("/etc/passwd")

---

26) FULL CREATE TABLE EXAMPLE:

CREATE DATABASE IF NOT EXISTS  my_database;
USE  my_database;
CREATE TABLE logs (
    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `tipo`   VARCHAR(10),
    `timestamp` BIGINT UNSIGNED,
    `mensagem`  TEXT
);


---

27) MARIADB ON CENTOS 7:
  $ yum install mariadb-server mariadb
  $ systemctl start mariadb.service
  $ systemctl enable mariadb.service
  $ /usr/bin/mysql_secure_installation

---

Checar o número de conexões abertas:

http://www.cyberciti.biz/faq/howto-show-mysql-open-database-connections-on-linux-unix/

---