- Communication using ports between host->container and container->container (fig.yml):

gitlab:
  image: sameersbn/gitlab:7.6.0
  links:
   - redis:redisio
   - postgresql:postgresql
  ports:
   - "10080:80"
   - "10022:22"
  environment:
    - GITLAB_HTTPS=false
pymark:
  build: .
  command: /bin/start.sh
  volumes:
    - .:/code
  links:
    - gitlab
    - postgresql

The "ports" section on fig.yml as "10080:80" means the docker host will use port 10080 to communicate with the container, but the "pymark" container will communicate with the "gitlab" container through port 80, and NOT port 10080.

- Cleanup docker volumes:

https://github.com/chadoe/docker-cleanup-volumes

- Entering a running container:
    $ docker exec -it [myContainer] bash
  (there is no more the need to install docker-enter or use nsenter)

- Docker taking up too much space: 

	That is due to not using the "overlay (fs)" storage driver. You can check the driver being used with:

		$ docker info
	
		Check on that for "Storage Driver". If that is different from "overlay" (e.g. "devicemapper" ) - that is the reason. 

		Now you must search your distro on how to enable "overlay (fs)" with docker (linux kernel >= 3.18 required).

			- For CentOS: http://www.projectatomic.io/blog/2015/06/notes-on-fedora-centos-and-docker-storage-drivers/
				1) Enable the kernel module at boot:
					$ vim /etc/modules-load.d/overlay
						#!/bin/bash
						exec /sbin/modprobe overlay  >/dev/null 2>&1
					$ chmod 777 etc/modules-load.d/overlay
				2) Reboot the machine				
				3) Move on configuring overlay on docker:	
					$ lsmod | grep overlay (to check that the module was raised)
					$ systemctl stop docker
					$ rm -fr /var/lib/docker
					$ vim /etc/sysconfig/docker
						DOCKER_STORAGE_OPTIONS= -s overlay
					$ systemctl start docker
					$ docker info


			- For Arch:
				1) Stop the docker service, uninstall docker, and remove its filesystem directory:
					$ systemctl stop docker
					$ pacman -Rd docker
					$ rm -fr /var/lib/docker

				2) Configure the overlay:	 
					$ modprobe overlay (enables the kernel module, available since linux kernel 3.18)
					$ lsmod | grep overlay (must return something)
					$ vim /usr/lib/systemd/system/docker.service
						Change the line "ExecStart" to:	
							ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver overlay

				3) Reinstall docker:
					$ pacman -Sy
					$ pacman -S docker
					$ systemctl enable docker 
					$ systemctl start docker
					$ docker info (you must see "Storage Driver" as "overlay").
				
		OBS.: Some posts advise the use of AUFS or BTRFS. As of september/2015, many posts on the internet say both are still too unstable. 
		      CoreOS, e.g., moved from BTRFS to EXT4+OverlayFS according to https://www.phoronix.com/scan.php?page=news_item&px=CoreOS-Btrfs-To-EXT4-OverlayFS .

	Additional information:

		When you use the storage driver "device mapper", you will have one or more loopback devices (loop*) with lsblk. E.g.:

			$ sudo docker info
			Containers: 0
			Images: 0
			Storage Driver: devicemapper
			 Pool Name: docker-202:1-134217872-pool

			$ lsblk
			NAME                          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
			xvda                          202:0    0  100G  0 disk 
			└─xvda1                       202:1    0  100G  0 part /
			loop0                           7:0    0  100G  0 loop 
			└─docker-202:1-134217872-pool 253:0    0  100G  0 dm   
			loop1                           7:1    0    2G  0 loop 
			└─docker-202:1-134217872-pool 253:0    0  100G  0 dm   

		In contrast, on an Arch Linux box with the storage driver "overlay", you will see no loopback devices. E.g.:

			$ docker info
			Containers: 35
			Images: 241
			Storage Driver: overlay
			 Backing Filesystem: extfs

			$ lsblk
			NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
			sda      8:0    0 931,5G  0 disk 
			├─sda1   8:1    0 199,2G  0 part /
			├─sda2   8:2    0     1K  0 part 
			├─sda3   8:3    0 199,2G  0 part /crypted
			├─sda4   8:4    0 527,2G  0 part /vault
			└─sda5   8:5    0   5,9G  0 part 
			sr0     11:0    1  1024M  0 rom  


	Reasons to prefer overlay: Faster, more reliable, and it seems to be what the Docker core team are running on their own setups, so it’s likely the one that’s getting the most testing.
	It also is in the Linux kernel proper as of 3.18. AUFS, on the other hand, was an out-of-tree kernel patchset, so each distro would have to evaluate if they would maintain it and put it into their kernel builds.


